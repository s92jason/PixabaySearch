// Generated by Dagger (https://dagger.dev).
package com.jasonchen.gogolooksearch.di;

import android.content.Context;
import androidx.lifecycle.ViewModel;
import com.jasonchen.gogolooksearch.MyApplication;
import com.jasonchen.gogolooksearch.MyApplication_MembersInjector;
import com.jasonchen.gogolooksearch.di.module.ActivityModule_ContributesMainActivity;
import com.jasonchen.gogolooksearch.di.module.FragmentModule_ContributesSearchFragment;
import com.jasonchen.gogolooksearch.di.module.NetWorkModule;
import com.jasonchen.gogolooksearch.di.module.NetWorkModule_ProvideHttpLoggingInterceptorFactory;
import com.jasonchen.gogolooksearch.di.module.NetWorkModule_ProvideOkHttpClientFactory;
import com.jasonchen.gogolooksearch.di.module.NetWorkModule_ProvidePixabayServiceFactory;
import com.jasonchen.gogolooksearch.di.module.NetWorkModule_ProvideRetrofitFactory;
import com.jasonchen.gogolooksearch.di.module.RepositoryModule;
import com.jasonchen.gogolooksearch.di.module.RepositoryModule_ProvidePixabayRepositoryFactory;
import com.jasonchen.gogolooksearch.repository.PixabayService;
import com.jasonchen.gogolooksearch.repository.repo.PixabayRepository;
import com.jasonchen.gogolooksearch.utils.SharedPrefUtil;
import com.jasonchen.gogolooksearch.utils.SharedPrefUtil_Factory;
import com.jasonchen.gogolooksearch.view.base.BaseActivity_MembersInjector;
import com.jasonchen.gogolooksearch.view.base.BaseFragment_MembersInjector;
import com.jasonchen.gogolooksearch.view.ui.MainActivity;
import com.jasonchen.gogolooksearch.view.ui.MainViewModel;
import com.jasonchen.gogolooksearch.view.ui.MainViewModel_Factory;
import com.jasonchen.gogolooksearch.view.ui.main.SearchFragment;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final DaggerAppComponent appComponent = this;

  private Provider<ActivityModule_ContributesMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<FragmentModule_ContributesSearchFragment.SearchFragmentSubcomponent.Factory> searchFragmentSubcomponentFactoryProvider;

  private Provider<MyApplication> applicationProvider;

  private Provider<HttpLoggingInterceptor> provideHttpLoggingInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<PixabayService> providePixabayServiceProvider;

  private Provider<PixabayRepository> providePixabayRepositoryProvider;

  private Provider<Context> contextProvider;

  private Provider<SharedPrefUtil> sharedPrefUtilProvider;

  private Provider<MainViewModel> mainViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<AppViewModelFactory> appViewModelFactoryProvider;

  private DaggerAppComponent(NetWorkModule netWorkModuleParam,
      RepositoryModule repositoryModuleParam, Context contextParam,
      MyApplication applicationParam) {

    initialize(netWorkModuleParam, repositoryModuleParam, contextParam, applicationParam);

  }

  public static AppComponent.Factory factory() {
    return new Factory();
  }

  private Map<Class<?>, Provider<dagger.android.AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<dagger.android.AndroidInjector.Factory<?>>>newMapBuilder(2).put(MainActivity.class, ((Provider) mainActivitySubcomponentFactoryProvider)).put(SearchFragment.class, ((Provider) searchFragmentSubcomponentFactoryProvider)).build();
  }

  private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<dagger.android.AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final NetWorkModule netWorkModuleParam,
      final RepositoryModule repositoryModuleParam, final Context contextParam,
      final MyApplication applicationParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributesMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributesMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory(appComponent);
      }
    };
    this.searchFragmentSubcomponentFactoryProvider = new Provider<FragmentModule_ContributesSearchFragment.SearchFragmentSubcomponent.Factory>() {
      @Override
      public FragmentModule_ContributesSearchFragment.SearchFragmentSubcomponent.Factory get() {
        return new SearchFragmentSubcomponentFactory(appComponent);
      }
    };
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideHttpLoggingInterceptorProvider = DoubleCheck.provider(NetWorkModule_ProvideHttpLoggingInterceptorFactory.create(netWorkModuleParam));
    this.provideOkHttpClientProvider = DoubleCheck.provider(NetWorkModule_ProvideOkHttpClientFactory.create(netWorkModuleParam, provideHttpLoggingInterceptorProvider));
    this.provideRetrofitProvider = DoubleCheck.provider(NetWorkModule_ProvideRetrofitFactory.create(netWorkModuleParam, provideOkHttpClientProvider));
    this.providePixabayServiceProvider = DoubleCheck.provider(NetWorkModule_ProvidePixabayServiceFactory.create(netWorkModuleParam, provideRetrofitProvider));
    this.providePixabayRepositoryProvider = DoubleCheck.provider(RepositoryModule_ProvidePixabayRepositoryFactory.create(repositoryModuleParam, providePixabayServiceProvider));
    this.contextProvider = InstanceFactory.create(contextParam);
    this.sharedPrefUtilProvider = DoubleCheck.provider(SharedPrefUtil_Factory.create(contextProvider));
    this.mainViewModelProvider = MainViewModel_Factory.create(applicationProvider, providePixabayRepositoryProvider, sharedPrefUtilProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(1).put(MainViewModel.class, ((Provider) mainViewModelProvider)).build();
    this.appViewModelFactoryProvider = DoubleCheck.provider(AppViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(MyApplication instance) {
    injectMyApplication(instance);
  }

  private MyApplication injectMyApplication(MyApplication instance) {
    MyApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Factory implements AppComponent.Factory {
    @Override
    public AppComponent create(Context context, MyApplication application) {
      Preconditions.checkNotNull(context);
      Preconditions.checkNotNull(application);
      return new DaggerAppComponent(new NetWorkModule(), new RepositoryModule(), context, application);
    }
  }

  private static final class MainActivitySubcomponentFactory implements ActivityModule_ContributesMainActivity.MainActivitySubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private MainActivitySubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public ActivityModule_ContributesMainActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(appComponent, arg0);
    }
  }

  private static final class SearchFragmentSubcomponentFactory implements FragmentModule_ContributesSearchFragment.SearchFragmentSubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private SearchFragmentSubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public FragmentModule_ContributesSearchFragment.SearchFragmentSubcomponent create(
        SearchFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new SearchFragmentSubcomponentImpl(appComponent, arg0);
    }
  }

  private static final class MainActivitySubcomponentImpl implements ActivityModule_ContributesMainActivity.MainActivitySubcomponent {
    private final DaggerAppComponent appComponent;

    private final MainActivitySubcomponentImpl mainActivitySubcomponentImpl = this;

    private MainActivitySubcomponentImpl(DaggerAppComponent appComponent, MainActivity arg0Param) {
      this.appComponent = appComponent;


    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      BaseActivity_MembersInjector.injectAndroidInjector(instance, appComponent.dispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectFactory(instance, appComponent.appViewModelFactoryProvider.get());
      return instance;
    }
  }

  private static final class SearchFragmentSubcomponentImpl implements FragmentModule_ContributesSearchFragment.SearchFragmentSubcomponent {
    private final DaggerAppComponent appComponent;

    private final SearchFragmentSubcomponentImpl searchFragmentSubcomponentImpl = this;

    private SearchFragmentSubcomponentImpl(DaggerAppComponent appComponent,
        SearchFragment arg0Param) {
      this.appComponent = appComponent;


    }

    @Override
    public void inject(SearchFragment arg0) {
      injectSearchFragment(arg0);
    }

    private SearchFragment injectSearchFragment(SearchFragment instance) {
      BaseFragment_MembersInjector.injectFactory(instance, appComponent.appViewModelFactoryProvider.get());
      return instance;
    }
  }
}
