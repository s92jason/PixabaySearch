// Generated by Dagger (https://dagger.dev).
package com.jasonchen.gogolooksearch.di.module;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import okhttp3.logging.HttpLoggingInterceptor;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetWorkModule_ProvideHttpLoggingInterceptorFactory implements Factory<HttpLoggingInterceptor> {
  private final NetWorkModule module;

  public NetWorkModule_ProvideHttpLoggingInterceptorFactory(NetWorkModule module) {
    this.module = module;
  }

  @Override
  public HttpLoggingInterceptor get() {
    return provideHttpLoggingInterceptor(module);
  }

  public static NetWorkModule_ProvideHttpLoggingInterceptorFactory create(NetWorkModule module) {
    return new NetWorkModule_ProvideHttpLoggingInterceptorFactory(module);
  }

  public static HttpLoggingInterceptor provideHttpLoggingInterceptor(NetWorkModule instance) {
    return Preconditions.checkNotNullFromProvides(instance.provideHttpLoggingInterceptor());
  }
}
