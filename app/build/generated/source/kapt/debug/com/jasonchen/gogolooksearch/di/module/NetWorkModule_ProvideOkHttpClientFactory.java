// Generated by Dagger (https://dagger.dev).
package com.jasonchen.gogolooksearch.di.module;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetWorkModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final NetWorkModule module;

  private final Provider<HttpLoggingInterceptor> loggingInterceptorProvider;

  public NetWorkModule_ProvideOkHttpClientFactory(NetWorkModule module,
      Provider<HttpLoggingInterceptor> loggingInterceptorProvider) {
    this.module = module;
    this.loggingInterceptorProvider = loggingInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(module, loggingInterceptorProvider.get());
  }

  public static NetWorkModule_ProvideOkHttpClientFactory create(NetWorkModule module,
      Provider<HttpLoggingInterceptor> loggingInterceptorProvider) {
    return new NetWorkModule_ProvideOkHttpClientFactory(module, loggingInterceptorProvider);
  }

  public static OkHttpClient provideOkHttpClient(NetWorkModule instance,
      HttpLoggingInterceptor loggingInterceptor) {
    return Preconditions.checkNotNullFromProvides(instance.provideOkHttpClient(loggingInterceptor));
  }
}
